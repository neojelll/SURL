name: Publish

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    concurrency: release
    permissions:
      packages: write
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Check directory name
        run: |
          DIRECTORY=$(git log -1 --name-only --pretty=format: | awk -F'/' '{print $1}' | sort -u | head -n 1)
          export DIRECTORY=$(echo "${DIRECTORY}" | tr '_' '-')
          echo "DIRECTORY=${DIRECTORY}" >> $GITHUB_ENV

      - name: Check pyproject.toml in directory
        id: check_file
        run: |
          if [ ! -f "${DIRECTORY}/pyproject.toml" ]; then
            echo "File pyproject.toml not found in ${DIRECTORY}. Skipping job."
            exit 0
          fi

      - name: Set up python
        if: steps.check_file.outcome == 'success'
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set up qemu
        if: steps.check_file.outcome == 'success'
        uses: docker/setup-qemu-action@v3
  
      - name: Set up docker buildx
        if: steps.check_file.outcome == 'success'
        uses: docker/setup-buildx-action@v3

      - name: Install poetry
        if: steps.check_file.outcome == 'success'
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        if: steps.check_file.outcome == 'success'
        run: |
          poetry install
        working-directory: ${{ env.DIRECTORY }}

      - name: Up version, build and publish package
        if: steps.check_file.outcome == 'success'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "action@github.com"
          poetry run semantic-release publish
        env:
          GH_TOKEN: ${{secrets.SEMANTIC_RELEASE_TOKEN}}
          PyPI_TOKEN: ${{secrets.URL_SHORTENER_PUBLISH_TOKEN}}
        working-directory: ${{ env.DIRECTORY }}

      - name: Wait for package availability
        if: steps.check_file.outcome == 'success'
        run: |
          while true; do
            if pip install neojelll-url-shortener-${{ env.DIRECTORY }}==${{ env.VERSION }} --dry-run; then
              echo "The ${{ env.VERSION }} version is available for installation."
              break
            else
              echo "${{ env.VERSION }} is not available. Try again in 2 seconds..."
              sleep 2
            fi
          done

      - name: Build docker image and publish
        if: steps.check_file.outcome == 'success'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io --username neojelll --password-stdin
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 --build-arg VERSION=${{ env.VERSION }} -t ghcr.io/neojelll/url-shortener-${{ env.DIRECTORY }}:${{ env.VERSION }} -t ghcr.io/neojelll/url-shortener-${{ env.DIRECTORY }}:latest --push .
        working-directory: ${{ env.DIRECTORY }}
