name: Publish

on:
  push:
    branches:
      - feat/expiration_manager
    paths:
      - "**/pyproject.toml"

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Check Project name
        run: |
          export PROJECT_NAME=$(git log -1 --name-only --pretty=format: | awk -F'/' '{print $1}' | sort -u | head -n 1)
          echo "PROJECT_NAME=${PROJECT_NAME}" >> $GITHUB_ENV

      - name: Check if version has changed
        run: |
          if ! git diff HEAD^ HEAD -- ${{ env.PROJECT_NAME }}/pyproject.toml | grep -q "version"; then
            exit 1
          fi
            
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          cd ${{ env.PROJECT_NAME }}
          poetry install

      - name: Build and publish package
        run: |
          cd ${{ env.PROJECT_NAME }}
          poetry config pypi-token.pypi ${{ secrets.URL_SHORTENER_PUBLISH_TOKEN }}
          poetry publish --build

      - name: Check version
        id: get_version
        run: |
          cd ${{ env.PROJECT_NAME }}
          export VERSION=$(cat pyproject.toml | grep "^version =" | grep -Po '\d+\.\d+\.\w+')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Wait for package availability
        run: |
          while true; do
            if pip install neojelll-url-shortener-${{ env.PROJECT_NAME }}==$VERSION --dry-run; then
              echo "The $VERSION version is available for installation."
              break
            else
              echo "$VERSION is not available. Try again in 2 seconds..."
              sleep 2
            fi
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build docker image and publish
        run: |
          cd ${{ env.PROJECT_NAME }}
          PROJECT_NAME=$(echo "${{ env.PROJECT_NAME }}" | tr '_' '-')
          docker buildx create --use
          docker buildx build --platform linux/amd64,linux/arm64 --build-arg VERSION=${{ env.VERSION }} -t ghcr.io/neojelll/url-shortener-$PROJECT_NAME:${{ env.VERSION }} --push .
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io --username neojelll --password-stdin
          docker push ghcr.io/neojelll/url-shortener-$PROJECT_NAME:${{ env.VERSION }}
